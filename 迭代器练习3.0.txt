Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>>  class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a
		self.a = self.b
		self.b = self.a + self.b
		self.count += 1
		
		if self.count > self.n:
			raise StopIteration
		return fib
	
SyntaxError: unexpected indent
>>> 
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a
		self.a = self.b
		self.b = self.a + self.b
		self.count += 1

		if self.count > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> next(1)
Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
    next(1)
TypeError: 'int' object is not an iterator
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    next(num)
  File "<pyshell#3>", line 12, in __next__
    self.count += 1
AttributeError: 'fib_num' object has no attribute 'count'
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a
		self.a = self.b
		self.b = self.a + self.b
		self.count += 1

		if self.count > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> 
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#11>", line 1, in <module>
    next(num)
  File "<pyshell#8>", line 12, in __next__
    self.count += 1
AttributeError: 'fib_num' object has no attribute 'count'
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
		self.count = 0
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a
		self.a = self.b
		self.b = self.a + self.b
		self.count += 1

		if self.count > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> next(num)
0
>>> next(num)
1
>>> next(num)
2
>>> next(num)
4
>>> next(num)
8
>>> next(num)
16
>>> class Myrange:
    def __init__(self,n):
        self.a = 0
        self.b = 1
        self.n = n
        self.count = 0
    def __iter__(self):
        return self
    def __next__(self):
            value = self.a
            self.a = self.b
            self.b = self.a + self.b
            self.count += 1
            if self.count > self.n:
                raise StopIteration
            return value

        
>>> fib = Myrange(9)
>>> next(fib)
0
>>> next(fib)
1
>>> next(fib)
2
>>> next(fib)
4
>>> next(fib)
8
>>> class fib_num:
	def __init__(self, num):
        self.num = num
        self.a, self.b = 0, 1
        self.idx = 0
 
	def __iter__(self):
        return self
 
	def __next__(self):
        if self.idx < self.num:
            self.a, self.b = self.b, self.a + self.b
            self.idx += 1
            return self.a
        raise StopIteration
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> class fib_num:
	def __init__(self, num):
		
		 self.num = num
		 self.a, self.b = 0, 1
		 self.idx = 0

	def __iter__(self):
        return self

	def __next__(self):
        if self.idx < self.num:
            self.a, self.b = self.b, self.a + self.b
            self.idx += 1
            return self.a
        raise StopIteration
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> class fib_num:
	def __init__(self, num):

		 self.num = num
		 self.a, self.b = 0, 1
		 self.idx = 0

	def __iter__(self):
		
		return self

	def __next__(self):
		
		if self.idx < self.num:
		   self.a, self.b = self.b, self.a + self.b
		   self.idx += 1
		    return self.a
        raise StopIteration
SyntaxError: unexpected indent
>>> class fib_num:
	def __init__(self, num):

		 self.num = num
		 self.a, self.b = 0, 1
		 self.idx = 0

	def __iter__(self):

		return self

	def __next__(self):

		if self.idx < self.num:
		   self.a, self.b = self.b, self.a + self.b
		   self.idx += 1
		return self.a
        raise StopIteration
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> class fib_num:
	def __init__(self, num):

		 self.num = num
		 self.a, self.b = 0, 1
		 self.idx = 0

	def __iter__(self):

		return self

	def __next__(self):

		if self.idx < self.num:
		   self.a, self.b = self.b, self.a + self.b
		   self.idx += 1
		   return self.a
		raise StopIteration

	
>>> num = fib_num(9)
>>> next(num)
1
>>> next(num)
1
>>> next(num)
2
>>> next(num)
3
>>> next(num)
5
>>> next(num)
8
>>> next(num)
13
>>> next(num)
21
>>> class fib_num:
	def __init__(self, num):

		 self.num = num
		 self.a = 0
		 self.b = 1
		 self.idx = 0

	def __iter__(self):

		return self

	def __next__(self):

		if self.idx < self.num:
		   self.a = self.b
		   self.b = self.a + self.b
		   self.idx += 1
		   return self.a
		raise StopIteration

	
>>> num = fib_num(9)
>>> next(num)
1
>>> next(num)
2
>>> next(num)
4
>>> next(num)
8
>>> class fib_num:
	def __init__(self, num):

		 self.num = num
		 self.a, self.b = 0, 1
		 self.idx = 0

	def __iter__(self):

		return self

	def __next__(self):

		if self.idx < self.num:
		   self.a, self.b = self.b, self.a + self.b
		   self.idx += 1
		   return self.a
		raise StopIteration
