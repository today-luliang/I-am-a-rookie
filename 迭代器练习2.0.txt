Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>>  class reverse:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		
SyntaxError: unexpected indent
>>> class reverse:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b
		
SyntaxError: invalid syntax
>>> class reverse:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.b
			self.b -= 1
			return value
		else:
			raise StopIteration

		
>>> num = reverse(1, 4)
>>> next(num)
4
>>> next(num)
3
>>> next(num)
2
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    next(num)
  File "<pyshell#10>", line 13, in __next__
    raise StopIteration
StopIteration
>>> num = reverse(0, 4)
>>> next(num)
4
>>> next(num)
3
>>> next(num)
2
>>> next(num)
1
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    next(num)
  File "<pyshell#10>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class fib_num:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __fib__(self):
		if self.a = 0:
			
SyntaxError: invalid syntax
>>> class fib_num:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			fib = 0
			self.A = self.a + 1
			fib = self.A + self.a
			self.a += 1
			return fib
		else:
			raise StopIteration

		
>>> num = fib_num(1, 9)
>>> next(num)
3
>>> next(num)
5
>>> next(num)
7
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b == self.n:
			return fib
		else:
			raise StopIteration

		
>>> num = fib_num(1, 9)
Traceback (most recent call last):
  File "<pyshell#50>", line 1, in <module>
    num = fib_num(1, 9)
TypeError: __init__() takes 2 positional arguments but 3 were given
>>> class fib_num:
	def __init__(self, a, b, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b == self.n:
			return fib
		else:
			raise StopIteration

		
>>> num = fib_num(1, 9)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    num = fib_num(1, 9)
TypeError: __init__() missing 1 required positional argument: 'n'
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b == self.n:
			return fib
		else:
			raise StopIteration

		
>>> num =fib_num(9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#57>", line 1, in <module>
    next(num)
  File "<pyshell#55>", line 15, in __next__
    raise StopIteration
StopIteration
>>> num = fib_num(9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    next(num)
  File "<pyshell#55>", line 15, in __next__
    raise StopIteration
StopIteration
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b > self.n:
			return fib
		else:
			raise StopIteration

		
>>> num = fib_num(9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#63>", line 1, in <module>
    next(num)
  File "<pyshell#61>", line 15, in __next__
    raise StopIteration
StopIteration
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
		self.count = 0
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.count += 1
		if self.count > self.n:
			return fib
		else:
			raise StopIteration

		
>>> num = fib_num(9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    next(num)
  File "<pyshell#65>", line 16, in __next__
    raise StopIteration
StopIteration
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
		self.count = 0
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.count += 1
		if self.count > self.n:
			return fib
		else:
			raise StopIterationclass fib_num:
				def __init__(self, n):
					self.a = 0
					self.b = 1
					self.n = n
				def __iter__(self):
					return self
				def __next__(self):
					fib = self.a + self.b
					self.a = self.b
					self.b += 1
					if self.b > self.n:
						return fib
					else:
						raise StopIteration
					
SyntaxError: invalid syntax
>>> 
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> next(num)
1
>>> next(num)
3
>>> next(num)
5
>>> next(num)
7
>>> next(num)
9
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b = self.a + self.b
		if self.b > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> next(num)
1
>>> next(num)
3
>>> next(num)
6
>>> 
