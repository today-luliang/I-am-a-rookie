Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> class MyRange:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
			self.a += 1
			return value
		else:
			raise StopIteration

		
>>> myrange = MyRange(1, 4)
>>> next(myrange)
1
>>> next(myrange)
2
>>> next(myrange)
3
>>> next(myrange)
Traceback (most recent call last):
  File "<pyshell#18>", line 1, in <module>
    next(myrange)
  File "<pyshell#13>", line 13, in __next__
    raise StopIteration
StopIteration
>>>  class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	
SyntaxError: unexpected indent
>>> class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def square(self):
		if self.a <self.b:
			value = self.a * self.a
			self.a += 1
			return value
		else:
			raise StopIteration

		
>>> num = number(1, 4)
>>> square(num)
Traceback (most recent call last):
  File "<pyshell#30>", line 1, in <module>
    square(num)
NameError: name 'square' is not defined
>>> class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __square__(self):
		if self.a <self.b:
			value = self.a * self.a
			self.a += 1
			return value   #Returns the square of the number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = number(1, 4)
>>> square(num)
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    square(num)
NameError: name 'square' is not defined
>>> class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a <self.b:
			value = self.a * self.a
			self.a += 1
			return value   #Returns the square of the number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = number(1, 4)
>>> next(num)
1
>>> next(num)
4
>>> next(num)
9
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#41>", line 1, in <module>
    next(num)
  File "<pyshell#36>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
		elif self.a % 2 == 0
		even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: expected an indented block
>>> 
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
		elif self.a % 2 == 0:
		even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: expected an indented block
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b
		elif self.a % 2 == 0:
		even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: invalid syntax
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
	elif self.a % 2 == 0:
		even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: expected an indented block
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
		   elif self.a % 2 == 0:
		even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: invalid syntax
>>> class even_number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			elif self.a % 2 == 0:
				even_num = self.a
			self.a += 1
			return even_num   #Returns the even number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: invalid syntax
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b

		
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			elif self.a % 2 == 0
			
SyntaxError: invalid syntax
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
		elif self.a % 2 == 0；
		
SyntaxError: expected an indented block
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
		elif self.a % 2 == 0:
			
SyntaxError: expected an indented block
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
	elif self.a % 2 == 0:
		
SyntaxError: expected an indented block
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
			if value % 2 == 0:
				even = value
				return even

			
>>> even_num = even_number(1, 9)
>>> next(even_num)
>>> next(even_num)
>>> next(even_num)
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
			if value % 2 == 0:
				even = value
				return even     #Returns the even number between all "a" to "b"
			else:
				raise StopIteration

			
>>> num = even_number(1, 9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#79>", line 1, in <module>
    next(num)
  File "<pyshell#77>", line 14, in __next__
    raise StopIteration
StopIteration
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#80>", line 1, in <module>
    next(num)
  File "<pyshell#77>", line 14, in __next__
    raise StopIteration
StopIteration
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
		elif self.a % 2 == 0:
			even = value
			return even      #Returns the even number between all "a" to "b"
		else :
			raise StopIteration

		
>>> num = even_number(1,9)
>>> next(num)
>>> next(num)
>>> next(num)
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
		elif self.a % 2 == 0:
			even = value
			print(even)      #Returns the even number between all "a" to "b"
		else :
			raise StopIteration

		
>>> num = even_number(1, 9)
>>> next(num)
>>> next(num)
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a % 2 == 0:
			even = self.a
		elif self.a < self.b:
			self.a += 1
			return even
		else raise StopIteration
		
SyntaxError: invalid syntax
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a % 2 == 0:
			even = self.a
		elif self.a < self.b:
			self.a += 1
			return even    #Returns the even number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = even_number(1, 9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    next(num)
  File "<pyshell#105>", line 12, in __next__
    return even    #Returns the even number between all "a" to "b"
UnboundLocalError: local variable 'even' referenced before assignment
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		while self.a < self.b:
			self.a += 1
			if self.a % 2 == 0；
			
SyntaxError: invalid character in identifier
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		while self.a < self.b:
			self.a += 1
			if self.a % 2 == 0：
			
SyntaxError: invalid character in identifier
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		while self.a < self.b:
			self.a += 1
		if self.a % 2 == 1:
			continue:
				
SyntaxError: invalid syntax
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		while self.a < self.b:
			self.a += 1
		if self.a % 2 == 1:
			continue
		
SyntaxError: 'continue' not properly in loop
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			self.a += 1
		elif self.a % 2 == 1:
			continue
		
SyntaxError: 'continue' not properly in loop
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			self.a += 1
			even = self.a
		elif even % 2 == 1:
			return even
		else:
			raise StopIteration

		
>>> num = even_number(1, 9)
>>> next(num)
>>> next(num)
>>> next(num)
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
    	def __next__(self):
		if self.a < self.b:
			self.a += 1
			even = self.a
		elif even % 2 == 1:
			return even     #Returns the even number between all "a" to "b"
		
SyntaxError: inconsistent use of tabs and spaces in indentation
>>>  class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			self.a += 1
			even = self.a
		elif even % 2 == 1:
			return even
		
SyntaxError: unexpected indent
>>> class even_number:          #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			self.a += 1
			even = self.a
		elif even % 2 == 1:
			return even

		
>>> num = even_number(1, 9)
>>> next(num)
>>> next(num)
>>> class myEven:
    def __init__(self, n):
        self.n = n
        self.num = 2

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.n:
            value = self.num
            self.num += 2
            return value
        else:
            raise StopIteration

        
>>> num = myEven(1,9)
Traceback (most recent call last):
  File "<pyshell#147>", line 1, in <module>
    num = myEven(1,9)
TypeError: __init__() takes 2 positional arguments but 3 were given
>>> class myEven:
    def __init__(self, n, num):
        self.n = n
        self.num = 2

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.n:
            value = self.num
            self.num += 2
            return value
        else:
            raise StopIteration

        
>>> even = myEven(1, 9)
>>> next(even)
Traceback (most recent call last):
  File "<pyshell#151>", line 1, in <module>
    next(even)
  File "<pyshell#149>", line 15, in __next__
    raise StopIteration
StopIteration
>>> Traceback (most recent call last):
  File "<pyshell#151>", line 1, in <module>
    next(even)
  File "<pyshell#149>", line 15, in __next__
    raise StopIteration
StopIteration
SyntaxError: invalid syntax
>>> class myEven:
    def __init__(self, n, num):
        self.n = n
        self.num = num

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.n:
            value = self.num
            self.num += 2
            return value
        else:
            raise StopIteration

        
>>> even = myEven(1, 9)
>>> next(even)
Traceback (most recent call last):
  File "<pyshell#156>", line 1, in <module>
    next(even)
  File "<pyshell#154>", line 15, in __next__
    raise StopIteration
StopIteration
>>> class myEven:
    def __init__(self, n):
        self.n = n
        self.num = 2

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.n:
            value = self.num
            self.num += 2
            return value
        else:
            raise StopIteration

        
>>> me = myEven(5)
>>> print(next(me))
2
>>> class reverse:
	def __init__(self, a, b)；
	
SyntaxError: invalid character in identifier
>>> class reverse:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
