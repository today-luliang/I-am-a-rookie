Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>>  class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a <self.b:
			value = self.a * self.a
			self.a += 1
			return value   #Returns the square of the number between all "a" to "b"
		else:
			raise StopIteration
		
SyntaxError: unexpected indent
>>> 
>>> class number:     #Create an iterator
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a <self.b:
			value = self.a * self.a
			self.a += 1
			return value   #Returns the square of the number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = number(1, 4)
>>>  next(num)
SyntaxError: unexpected indent
>>> next(num)
1
>>> next(num)
4
>>> next(num)
9
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#9>", line 1, in <module>
    next(num)
  File "<pyshell#3>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class odd_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		odd = self.a + self.b
		self.a = self.b
		self.b += 1
		if self.b > self.n:
			raise StopIteration
		return odd

	
>>> num = odd_num(9)
>>> next(num)
1
>>> next(num)
3
>>> next(num)
5
>>> next(num)
7
>>> next(num)
9
>>> next(num)
11
>>> class reverse:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.b
			self.b -= 1
			return value   #Returns the number between n and 0
		else:
			raise StopIteration

		
>>> num = reverse(0, 4)
>>> next(num)
4
>>> next(num)
3
>>> next(num)
2
>>> next(num)
1
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    next(num)
  File "<pyshell#20>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class MyRange:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
			self.a += 1
			return value
		else:
			raise StopIteration

		
>>> for value in MyRange(0, 9):
	b = value + 1
	print(value, b)

	
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
>>> class even_num:
	def __init__(self, a, b):
		self.a = a
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a > self.b:
			value = self.a
			self.a -= 1
			return value
		else:
			raise StopIteration

		
>>> even = even_num(0, 6)
>>> next(even)
Traceback (most recent call last):
  File "<pyshell#38>", line 1, in <module>
    next(even)
  File "<pyshell#36>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class even_num:
	def __init__(self, a, b):
		self.a = 2
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a > self.b:
			value = self.a
			self.a += 2
			return value  #Returns the even number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = even_num(0, 9)
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#42>", line 1, in <module>
    next(num)
  File "<pyshell#40>", line 13, in __next__
    raise StopIteration
StopIteration
>>> class even_num:
	def __init__(self, a, b):
		self.a = 2
		self.b = b
	def __iter__(self):
		return self
	def __next__(self):
		if self.a < self.b:
			value = self.a
			self.a += 2
			return value  #Returns the even number between all "a" to "b"
		else:
			raise StopIteration

		
>>> num = even_num(0, 9)
>>> next(num)
2
>>> next(num)
4
>>> next(num)
6
>>> next(num)
8
>>> next(num)
Traceback (most recent call last):
  File "<pyshell#50>", line 1, in <module>
    next(num)
  File "<pyshell#44>", line 13, in __next__
    raise StopIteration
StopIteration
>>>  class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b = self.a + self.b
		if self.b > self.n:
			raise StopIteration
		return fib
	
SyntaxError: unexpected indent
>>> class fib_num:
	def __init__(self, n):
		self.a = 0
		self.b = 1
		self.n = n
	def __iter__(self):
		return self
	def __next__(self):
		fib = self.a + self.b
		self.a = self.b
		self.b = self.a + self.b
		if self.b > self.n:
			raise StopIteration
		return fib

	
>>> num = fib_num(9)
>>> next(num)
1
>>> next(num)
3
>>> next(num)
6
>>> 
